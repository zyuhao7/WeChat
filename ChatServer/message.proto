syntax = "proto3";
package message;

service VerifyService {
  rpc GetVerifyCode (GetVerifyReq) returns (GetVerifyRsp) {}
}

message GetVerifyReq {
  string email = 1;
}

message GetVerifyRsp {
  int32 error = 1;
  string email = 2;
  string code = 3;
}


message GetChatServerReq {
  int32 uid = 1;
}

message GetChatServerRsp {
  int32 error = 1;
  string host = 2;
  string port = 3;
  string token = 4;
}

message LoginReq{
	int32 uid = 1;
	string token= 2;
}

message LoginRsp {
	int32 error = 1;
	int32 uid = 2;
	string token = 3;
}

service StatusService {
	rpc GetChatServer (GetChatServerReq) returns (GetChatServerRsp) {}
	rpc Login(LoginReq) returns(LoginRsp);
}

message AddFriendReq{
	int32 applyuid = 1;
	string name = 2;
	string desc = 3;
	string icon = 4;
	string nick = 5;
	int32 sex = 6;
	int32 touid = 7;
}

message AddFriendRsp{
	int32 error = 1;
	int32 applyuid = 2;
	int32 touid = 3;
}

message RplyFriendReq{
	int32 rplyuid = 1;
	bool agree = 2;
	int32 touid = 3;
}

message RplyFriendRsp{
	int32 error = 1;
	int32 rplyuid = 2;
	int32 touid = 3;
}

message SendChatMsgReq{
	int32 fromuid = 1;
	int32 touid = 2;
	string message = 3;
}

message SendChatMsgRsp{
	int32 error = 1;
	int32 fromuid = 2;
	string touid = 3;
}

message AuthFriendReq{
	int32 fromuid = 1;
	int32 touid = 2;
}

message AuthFriendRsp{
	int32 error = 1;
	int32 fromuid = 2;
	int32 touid = 3;
}

message TextChatMsgReq {
	int32 fromuid = 1;
    int32 touid = 2;
	repeated TextChatData textmsgs = 3;
}

message TextChatData{
	string msgid = 1;
	string msgcontent = 2;
}

message TextChatMsgRsp {
	int32 error = 1;
	int32 fromuid = 2;
	int32 touid = 3; 
	repeated TextChatData textmsgs = 4;
}

message KickUserReq{
	int32 uid = 1;
}

message KickUserRsp{
	int32 error = 1;
	int32 uid = 2;
}

service ChatService {
	rpc NotifyAddFriend(AddFriendReq) returns (AddFriendRsp) {}
	rpc RplyAddFriend(RplyFriendReq) returns (RplyFriendRsp) {}
	rpc SendChatMsg(SendChatMsgReq) returns (SendChatMsgRsp) {}
	rpc NotifyAuthFriend(AuthFriendReq) returns (AuthFriendRsp) {}
	rpc NotifyTextChatMsg(TextChatMsgReq) returns (TextChatMsgRsp){}
	rpc NotifyKickUser(KickUserReq) returns (KickUserRsp){}
}






// G:\resource\source\grpc\visualpro\third_party\protobuf\Debug\protoc.exe --cpp_out=. "message.proto"
// G:\resource\source\grpc\visualpro\third_party\protobuf\Debug\protoc.exe -I="." --grpc_out="." --plugin=protoc-gen-grpc=G:\resource\source\grpc\visualpro\Debug\grpc_cpp_plugin.exe "message.proto"


